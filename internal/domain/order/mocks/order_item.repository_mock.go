// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package order

import (
	"context"

	"github.com/goodone-dev/go-boilerplate/internal/domain/order"
	"github.com/goodone-dev/go-boilerplate/internal/infrastructure/database"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
	"gorm.io/gorm"
)

// NewOrderItemRepositoryMock creates a new instance of OrderItemRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderItemRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderItemRepositoryMock {
	mock := &OrderItemRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// OrderItemRepositoryMock is an autogenerated mock type for the OrderItemRepository type
type OrderItemRepositoryMock struct {
	mock.Mock
}

type OrderItemRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrderItemRepositoryMock) EXPECT() *OrderItemRepositoryMock_Expecter {
	return &OrderItemRepositoryMock_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) Begin(ctx context.Context) (*gorm.DB, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *gorm.DB
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) (*gorm.DB, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type OrderItemRepositoryMock_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OrderItemRepositoryMock_Expecter) Begin(ctx interface{}) *OrderItemRepositoryMock_Begin_Call {
	return &OrderItemRepositoryMock_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *OrderItemRepositoryMock_Begin_Call) Run(run func(ctx context.Context)) *OrderItemRepositoryMock_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_Begin_Call) Return(dB *gorm.DB, err error) *OrderItemRepositoryMock_Begin_Call {
	_c.Call.Return(dB, err)
	return _c
}

func (_c *OrderItemRepositoryMock_Begin_Call) RunAndReturn(run func(ctx context.Context) (*gorm.DB, error)) *OrderItemRepositoryMock_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) Commit(trx *gorm.DB) *gorm.DB {
	ret := _mock.Called(trx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 *gorm.DB
	if returnFunc, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = returnFunc(trx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	return r0
}

// OrderItemRepositoryMock_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type OrderItemRepositoryMock_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) Commit(trx interface{}) *OrderItemRepositoryMock_Commit_Call {
	return &OrderItemRepositoryMock_Commit_Call{Call: _e.mock.On("Commit", trx)}
}

func (_c *OrderItemRepositoryMock_Commit_Call) Run(run func(trx *gorm.DB)) *OrderItemRepositoryMock_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gorm.DB
		if args[0] != nil {
			arg0 = args[0].(*gorm.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_Commit_Call) Return(dB *gorm.DB) *OrderItemRepositoryMock_Commit_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *OrderItemRepositoryMock_Commit_Call) RunAndReturn(run func(trx *gorm.DB) *gorm.DB) *OrderItemRepositoryMock_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteById provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) DeleteById(ctx context.Context, ID uuid.UUID, trx *gorm.DB) error {
	ret := _mock.Called(ctx, ID, trx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, ID, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// OrderItemRepositoryMock_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type OrderItemRepositoryMock_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) DeleteById(ctx interface{}, ID interface{}, trx interface{}) *OrderItemRepositoryMock_DeleteById_Call {
	return &OrderItemRepositoryMock_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, ID, trx)}
}

func (_c *OrderItemRepositoryMock_DeleteById_Call) Run(run func(ctx context.Context, ID uuid.UUID, trx *gorm.DB)) *OrderItemRepositoryMock_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_DeleteById_Call) Return(err error) *OrderItemRepositoryMock_DeleteById_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderItemRepositoryMock_DeleteById_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, trx *gorm.DB) error) *OrderItemRepositoryMock_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByIds provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) DeleteByIds(ctx context.Context, IDs []uuid.UUID, trx *gorm.DB) error {
	ret := _mock.Called(ctx, IDs, trx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByIds")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, IDs, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// OrderItemRepositoryMock_DeleteByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByIds'
type OrderItemRepositoryMock_DeleteByIds_Call struct {
	*mock.Call
}

// DeleteByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []uuid.UUID
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) DeleteByIds(ctx interface{}, IDs interface{}, trx interface{}) *OrderItemRepositoryMock_DeleteByIds_Call {
	return &OrderItemRepositoryMock_DeleteByIds_Call{Call: _e.mock.On("DeleteByIds", ctx, IDs, trx)}
}

func (_c *OrderItemRepositoryMock_DeleteByIds_Call) Run(run func(ctx context.Context, IDs []uuid.UUID, trx *gorm.DB)) *OrderItemRepositoryMock_DeleteByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]uuid.UUID)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_DeleteByIds_Call) Return(err error) *OrderItemRepositoryMock_DeleteByIds_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderItemRepositoryMock_DeleteByIds_Call) RunAndReturn(run func(ctx context.Context, IDs []uuid.UUID, trx *gorm.DB) error) *OrderItemRepositoryMock_DeleteByIds_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteMany provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) DeleteMany(ctx context.Context, filter map[string]any, trx *gorm.DB) error {
	ret := _mock.Called(ctx, filter, trx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, filter, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// OrderItemRepositoryMock_DeleteMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMany'
type OrderItemRepositoryMock_DeleteMany_Call struct {
	*mock.Call
}

// DeleteMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[string]any
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) DeleteMany(ctx interface{}, filter interface{}, trx interface{}) *OrderItemRepositoryMock_DeleteMany_Call {
	return &OrderItemRepositoryMock_DeleteMany_Call{Call: _e.mock.On("DeleteMany", ctx, filter, trx)}
}

func (_c *OrderItemRepositoryMock_DeleteMany_Call) Run(run func(ctx context.Context, filter map[string]any, trx *gorm.DB)) *OrderItemRepositoryMock_DeleteMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_DeleteMany_Call) Return(err error) *OrderItemRepositoryMock_DeleteMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderItemRepositoryMock_DeleteMany_Call) RunAndReturn(run func(ctx context.Context, filter map[string]any, trx *gorm.DB) error) *OrderItemRepositoryMock_DeleteMany_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) FindAll(ctx context.Context, filter map[string]any) ([]order.OrderItem, error) {
	ret := _mock.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []order.OrderItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any) ([]order.OrderItem, error)); ok {
		return returnFunc(ctx, filter)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any) []order.OrderItem); ok {
		r0 = returnFunc(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.OrderItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, map[string]any) error); ok {
		r1 = returnFunc(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type OrderItemRepositoryMock_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[string]any
func (_e *OrderItemRepositoryMock_Expecter) FindAll(ctx interface{}, filter interface{}) *OrderItemRepositoryMock_FindAll_Call {
	return &OrderItemRepositoryMock_FindAll_Call{Call: _e.mock.On("FindAll", ctx, filter)}
}

func (_c *OrderItemRepositoryMock_FindAll_Call) Run(run func(ctx context.Context, filter map[string]any)) *OrderItemRepositoryMock_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_FindAll_Call) Return(orderItems []order.OrderItem, err error) *OrderItemRepositoryMock_FindAll_Call {
	_c.Call.Return(orderItems, err)
	return _c
}

func (_c *OrderItemRepositoryMock_FindAll_Call) RunAndReturn(run func(ctx context.Context, filter map[string]any) ([]order.OrderItem, error)) *OrderItemRepositoryMock_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByCursor provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) FindByCursor(ctx context.Context, filter map[string]any, sort []string, size int, next *uuid.UUID) (database.Pagination[order.OrderItem], error) {
	ret := _mock.Called(ctx, filter, sort, size, next)

	if len(ret) == 0 {
		panic("no return value specified for FindByCursor")
	}

	var r0 database.Pagination[order.OrderItem]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any, []string, int, *uuid.UUID) (database.Pagination[order.OrderItem], error)); ok {
		return returnFunc(ctx, filter, sort, size, next)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any, []string, int, *uuid.UUID) database.Pagination[order.OrderItem]); ok {
		r0 = returnFunc(ctx, filter, sort, size, next)
	} else {
		r0 = ret.Get(0).(database.Pagination[order.OrderItem])
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, map[string]any, []string, int, *uuid.UUID) error); ok {
		r1 = returnFunc(ctx, filter, sort, size, next)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_FindByCursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByCursor'
type OrderItemRepositoryMock_FindByCursor_Call struct {
	*mock.Call
}

// FindByCursor is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[string]any
//   - sort []string
//   - size int
//   - next *uuid.UUID
func (_e *OrderItemRepositoryMock_Expecter) FindByCursor(ctx interface{}, filter interface{}, sort interface{}, size interface{}, next interface{}) *OrderItemRepositoryMock_FindByCursor_Call {
	return &OrderItemRepositoryMock_FindByCursor_Call{Call: _e.mock.On("FindByCursor", ctx, filter, sort, size, next)}
}

func (_c *OrderItemRepositoryMock_FindByCursor_Call) Run(run func(ctx context.Context, filter map[string]any, sort []string, size int, next *uuid.UUID)) *OrderItemRepositoryMock_FindByCursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 *uuid.UUID
		if args[4] != nil {
			arg4 = args[4].(*uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_FindByCursor_Call) Return(res database.Pagination[order.OrderItem], err error) *OrderItemRepositoryMock_FindByCursor_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *OrderItemRepositoryMock_FindByCursor_Call) RunAndReturn(run func(ctx context.Context, filter map[string]any, sort []string, size int, next *uuid.UUID) (database.Pagination[order.OrderItem], error)) *OrderItemRepositoryMock_FindByCursor_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) FindById(ctx context.Context, ID uuid.UUID) (*order.OrderItem, error) {
	ret := _mock.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *order.OrderItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*order.OrderItem, error)); ok {
		return returnFunc(ctx, ID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID) *order.OrderItem); ok {
		r0 = returnFunc(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type OrderItemRepositoryMock_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
func (_e *OrderItemRepositoryMock_Expecter) FindById(ctx interface{}, ID interface{}) *OrderItemRepositoryMock_FindById_Call {
	return &OrderItemRepositoryMock_FindById_Call{Call: _e.mock.On("FindById", ctx, ID)}
}

func (_c *OrderItemRepositoryMock_FindById_Call) Run(run func(ctx context.Context, ID uuid.UUID)) *OrderItemRepositoryMock_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_FindById_Call) Return(orderItem *order.OrderItem, err error) *OrderItemRepositoryMock_FindById_Call {
	_c.Call.Return(orderItem, err)
	return _c
}

func (_c *OrderItemRepositoryMock_FindById_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID) (*order.OrderItem, error)) *OrderItemRepositoryMock_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIdAndLock provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) FindByIdAndLock(ctx context.Context, ID uuid.UUID, trx *gorm.DB) (*order.OrderItem, error) {
	ret := _mock.Called(ctx, ID, trx)

	if len(ret) == 0 {
		panic("no return value specified for FindByIdAndLock")
	}

	var r0 *order.OrderItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *gorm.DB) (*order.OrderItem, error)); ok {
		return returnFunc(ctx, ID, trx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, *gorm.DB) *order.OrderItem); ok {
		r0 = returnFunc(ctx, ID, trx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.OrderItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, *gorm.DB) error); ok {
		r1 = returnFunc(ctx, ID, trx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_FindByIdAndLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIdAndLock'
type OrderItemRepositoryMock_FindByIdAndLock_Call struct {
	*mock.Call
}

// FindByIdAndLock is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) FindByIdAndLock(ctx interface{}, ID interface{}, trx interface{}) *OrderItemRepositoryMock_FindByIdAndLock_Call {
	return &OrderItemRepositoryMock_FindByIdAndLock_Call{Call: _e.mock.On("FindByIdAndLock", ctx, ID, trx)}
}

func (_c *OrderItemRepositoryMock_FindByIdAndLock_Call) Run(run func(ctx context.Context, ID uuid.UUID, trx *gorm.DB)) *OrderItemRepositoryMock_FindByIdAndLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_FindByIdAndLock_Call) Return(orderItem *order.OrderItem, err error) *OrderItemRepositoryMock_FindByIdAndLock_Call {
	_c.Call.Return(orderItem, err)
	return _c
}

func (_c *OrderItemRepositoryMock_FindByIdAndLock_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, trx *gorm.DB) (*order.OrderItem, error)) *OrderItemRepositoryMock_FindByIdAndLock_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIds provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) FindByIds(ctx context.Context, IDs []uuid.UUID) ([]order.OrderItem, error) {
	ret := _mock.Called(ctx, IDs)

	if len(ret) == 0 {
		panic("no return value specified for FindByIds")
	}

	var r0 []order.OrderItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]order.OrderItem, error)); ok {
		return returnFunc(ctx, IDs)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []order.OrderItem); ok {
		r0 = returnFunc(ctx, IDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.OrderItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = returnFunc(ctx, IDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_FindByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIds'
type OrderItemRepositoryMock_FindByIds_Call struct {
	*mock.Call
}

// FindByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []uuid.UUID
func (_e *OrderItemRepositoryMock_Expecter) FindByIds(ctx interface{}, IDs interface{}) *OrderItemRepositoryMock_FindByIds_Call {
	return &OrderItemRepositoryMock_FindByIds_Call{Call: _e.mock.On("FindByIds", ctx, IDs)}
}

func (_c *OrderItemRepositoryMock_FindByIds_Call) Run(run func(ctx context.Context, IDs []uuid.UUID)) *OrderItemRepositoryMock_FindByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_FindByIds_Call) Return(orderItems []order.OrderItem, err error) *OrderItemRepositoryMock_FindByIds_Call {
	_c.Call.Return(orderItems, err)
	return _c
}

func (_c *OrderItemRepositoryMock_FindByIds_Call) RunAndReturn(run func(ctx context.Context, IDs []uuid.UUID) ([]order.OrderItem, error)) *OrderItemRepositoryMock_FindByIds_Call {
	_c.Call.Return(run)
	return _c
}

// FindByOffset provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) FindByOffset(ctx context.Context, filter map[string]any, sort []string, size int, page int) (database.Pagination[order.OrderItem], error) {
	ret := _mock.Called(ctx, filter, sort, size, page)

	if len(ret) == 0 {
		panic("no return value specified for FindByOffset")
	}

	var r0 database.Pagination[order.OrderItem]
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any, []string, int, int) (database.Pagination[order.OrderItem], error)); ok {
		return returnFunc(ctx, filter, sort, size, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any, []string, int, int) database.Pagination[order.OrderItem]); ok {
		r0 = returnFunc(ctx, filter, sort, size, page)
	} else {
		r0 = ret.Get(0).(database.Pagination[order.OrderItem])
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, map[string]any, []string, int, int) error); ok {
		r1 = returnFunc(ctx, filter, sort, size, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_FindByOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByOffset'
type OrderItemRepositoryMock_FindByOffset_Call struct {
	*mock.Call
}

// FindByOffset is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[string]any
//   - sort []string
//   - size int
//   - page int
func (_e *OrderItemRepositoryMock_Expecter) FindByOffset(ctx interface{}, filter interface{}, sort interface{}, size interface{}, page interface{}) *OrderItemRepositoryMock_FindByOffset_Call {
	return &OrderItemRepositoryMock_FindByOffset_Call{Call: _e.mock.On("FindByOffset", ctx, filter, sort, size, page)}
}

func (_c *OrderItemRepositoryMock_FindByOffset_Call) Run(run func(ctx context.Context, filter map[string]any, sort []string, size int, page int)) *OrderItemRepositoryMock_FindByOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_FindByOffset_Call) Return(res database.Pagination[order.OrderItem], err error) *OrderItemRepositoryMock_FindByOffset_Call {
	_c.Call.Return(res, err)
	return _c
}

func (_c *OrderItemRepositoryMock_FindByOffset_Call) RunAndReturn(run func(ctx context.Context, filter map[string]any, sort []string, size int, page int) (database.Pagination[order.OrderItem], error)) *OrderItemRepositoryMock_FindByOffset_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) Insert(ctx context.Context, model order.OrderItem, trx *gorm.DB) (order.OrderItem, error) {
	ret := _mock.Called(ctx, model, trx)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 order.OrderItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, order.OrderItem, *gorm.DB) (order.OrderItem, error)); ok {
		return returnFunc(ctx, model, trx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, order.OrderItem, *gorm.DB) order.OrderItem); ok {
		r0 = returnFunc(ctx, model, trx)
	} else {
		r0 = ret.Get(0).(order.OrderItem)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, order.OrderItem, *gorm.DB) error); ok {
		r1 = returnFunc(ctx, model, trx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type OrderItemRepositoryMock_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - model order.OrderItem
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) Insert(ctx interface{}, model interface{}, trx interface{}) *OrderItemRepositoryMock_Insert_Call {
	return &OrderItemRepositoryMock_Insert_Call{Call: _e.mock.On("Insert", ctx, model, trx)}
}

func (_c *OrderItemRepositoryMock_Insert_Call) Run(run func(ctx context.Context, model order.OrderItem, trx *gorm.DB)) *OrderItemRepositoryMock_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 order.OrderItem
		if args[1] != nil {
			arg1 = args[1].(order.OrderItem)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_Insert_Call) Return(orderItem order.OrderItem, err error) *OrderItemRepositoryMock_Insert_Call {
	_c.Call.Return(orderItem, err)
	return _c
}

func (_c *OrderItemRepositoryMock_Insert_Call) RunAndReturn(run func(ctx context.Context, model order.OrderItem, trx *gorm.DB) (order.OrderItem, error)) *OrderItemRepositoryMock_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// InsertMany provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) InsertMany(ctx context.Context, models []order.OrderItem, trx *gorm.DB) ([]order.OrderItem, error) {
	ret := _mock.Called(ctx, models, trx)

	if len(ret) == 0 {
		panic("no return value specified for InsertMany")
	}

	var r0 []order.OrderItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []order.OrderItem, *gorm.DB) ([]order.OrderItem, error)); ok {
		return returnFunc(ctx, models, trx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, []order.OrderItem, *gorm.DB) []order.OrderItem); ok {
		r0 = returnFunc(ctx, models, trx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.OrderItem)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, []order.OrderItem, *gorm.DB) error); ok {
		r1 = returnFunc(ctx, models, trx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_InsertMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertMany'
type OrderItemRepositoryMock_InsertMany_Call struct {
	*mock.Call
}

// InsertMany is a helper method to define mock.On call
//   - ctx context.Context
//   - models []order.OrderItem
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) InsertMany(ctx interface{}, models interface{}, trx interface{}) *OrderItemRepositoryMock_InsertMany_Call {
	return &OrderItemRepositoryMock_InsertMany_Call{Call: _e.mock.On("InsertMany", ctx, models, trx)}
}

func (_c *OrderItemRepositoryMock_InsertMany_Call) Run(run func(ctx context.Context, models []order.OrderItem, trx *gorm.DB)) *OrderItemRepositoryMock_InsertMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []order.OrderItem
		if args[1] != nil {
			arg1 = args[1].([]order.OrderItem)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_InsertMany_Call) Return(orderItems []order.OrderItem, err error) *OrderItemRepositoryMock_InsertMany_Call {
	_c.Call.Return(orderItems, err)
	return _c
}

func (_c *OrderItemRepositoryMock_InsertMany_Call) RunAndReturn(run func(ctx context.Context, models []order.OrderItem, trx *gorm.DB) ([]order.OrderItem, error)) *OrderItemRepositoryMock_InsertMany_Call {
	_c.Call.Return(run)
	return _c
}

// MasterDB provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) MasterDB() *gorm.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for MasterDB")
	}

	var r0 *gorm.DB
	if returnFunc, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	return r0
}

// OrderItemRepositoryMock_MasterDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MasterDB'
type OrderItemRepositoryMock_MasterDB_Call struct {
	*mock.Call
}

// MasterDB is a helper method to define mock.On call
func (_e *OrderItemRepositoryMock_Expecter) MasterDB() *OrderItemRepositoryMock_MasterDB_Call {
	return &OrderItemRepositoryMock_MasterDB_Call{Call: _e.mock.On("MasterDB")}
}

func (_c *OrderItemRepositoryMock_MasterDB_Call) Run(run func()) *OrderItemRepositoryMock_MasterDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderItemRepositoryMock_MasterDB_Call) Return(dB *gorm.DB) *OrderItemRepositoryMock_MasterDB_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *OrderItemRepositoryMock_MasterDB_Call) RunAndReturn(run func() *gorm.DB) *OrderItemRepositoryMock_MasterDB_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) Rollback(trx *gorm.DB) *gorm.DB {
	ret := _mock.Called(trx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 *gorm.DB
	if returnFunc, ok := ret.Get(0).(func(*gorm.DB) *gorm.DB); ok {
		r0 = returnFunc(trx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	return r0
}

// OrderItemRepositoryMock_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type OrderItemRepositoryMock_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) Rollback(trx interface{}) *OrderItemRepositoryMock_Rollback_Call {
	return &OrderItemRepositoryMock_Rollback_Call{Call: _e.mock.On("Rollback", trx)}
}

func (_c *OrderItemRepositoryMock_Rollback_Call) Run(run func(trx *gorm.DB)) *OrderItemRepositoryMock_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gorm.DB
		if args[0] != nil {
			arg0 = args[0].(*gorm.DB)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_Rollback_Call) Return(dB *gorm.DB) *OrderItemRepositoryMock_Rollback_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *OrderItemRepositoryMock_Rollback_Call) RunAndReturn(run func(trx *gorm.DB) *gorm.DB) *OrderItemRepositoryMock_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// SlaveDB provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) SlaveDB() *gorm.DB {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SlaveDB")
	}

	var r0 *gorm.DB
	if returnFunc, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}
	return r0
}

// OrderItemRepositoryMock_SlaveDB_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SlaveDB'
type OrderItemRepositoryMock_SlaveDB_Call struct {
	*mock.Call
}

// SlaveDB is a helper method to define mock.On call
func (_e *OrderItemRepositoryMock_Expecter) SlaveDB() *OrderItemRepositoryMock_SlaveDB_Call {
	return &OrderItemRepositoryMock_SlaveDB_Call{Call: _e.mock.On("SlaveDB")}
}

func (_c *OrderItemRepositoryMock_SlaveDB_Call) Run(run func()) *OrderItemRepositoryMock_SlaveDB_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OrderItemRepositoryMock_SlaveDB_Call) Return(dB *gorm.DB) *OrderItemRepositoryMock_SlaveDB_Call {
	_c.Call.Return(dB)
	return _c
}

func (_c *OrderItemRepositoryMock_SlaveDB_Call) RunAndReturn(run func() *gorm.DB) *OrderItemRepositoryMock_SlaveDB_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) Update(ctx context.Context, model order.OrderItem, trx *gorm.DB) error {
	ret := _mock.Called(ctx, model, trx)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, order.OrderItem, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, model, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// OrderItemRepositoryMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type OrderItemRepositoryMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - model order.OrderItem
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) Update(ctx interface{}, model interface{}, trx interface{}) *OrderItemRepositoryMock_Update_Call {
	return &OrderItemRepositoryMock_Update_Call{Call: _e.mock.On("Update", ctx, model, trx)}
}

func (_c *OrderItemRepositoryMock_Update_Call) Run(run func(ctx context.Context, model order.OrderItem, trx *gorm.DB)) *OrderItemRepositoryMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 order.OrderItem
		if args[1] != nil {
			arg1 = args[1].(order.OrderItem)
		}
		var arg2 *gorm.DB
		if args[2] != nil {
			arg2 = args[2].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_Update_Call) Return(err error) *OrderItemRepositoryMock_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderItemRepositoryMock_Update_Call) RunAndReturn(run func(ctx context.Context, model order.OrderItem, trx *gorm.DB) error) *OrderItemRepositoryMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateById provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) UpdateById(ctx context.Context, ID uuid.UUID, payload map[string]any, trx *gorm.DB) (order.OrderItem, error) {
	ret := _mock.Called(ctx, ID, payload, trx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 order.OrderItem
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]any, *gorm.DB) (order.OrderItem, error)); ok {
		return returnFunc(ctx, ID, payload, trx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, uuid.UUID, map[string]any, *gorm.DB) order.OrderItem); ok {
		r0 = returnFunc(ctx, ID, payload, trx)
	} else {
		r0 = ret.Get(0).(order.OrderItem)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, uuid.UUID, map[string]any, *gorm.DB) error); ok {
		r1 = returnFunc(ctx, ID, payload, trx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// OrderItemRepositoryMock_UpdateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateById'
type OrderItemRepositoryMock_UpdateById_Call struct {
	*mock.Call
}

// UpdateById is a helper method to define mock.On call
//   - ctx context.Context
//   - ID uuid.UUID
//   - payload map[string]any
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) UpdateById(ctx interface{}, ID interface{}, payload interface{}, trx interface{}) *OrderItemRepositoryMock_UpdateById_Call {
	return &OrderItemRepositoryMock_UpdateById_Call{Call: _e.mock.On("UpdateById", ctx, ID, payload, trx)}
}

func (_c *OrderItemRepositoryMock_UpdateById_Call) Run(run func(ctx context.Context, ID uuid.UUID, payload map[string]any, trx *gorm.DB)) *OrderItemRepositoryMock_UpdateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		var arg2 map[string]any
		if args[2] != nil {
			arg2 = args[2].(map[string]any)
		}
		var arg3 *gorm.DB
		if args[3] != nil {
			arg3 = args[3].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_UpdateById_Call) Return(orderItem order.OrderItem, err error) *OrderItemRepositoryMock_UpdateById_Call {
	_c.Call.Return(orderItem, err)
	return _c
}

func (_c *OrderItemRepositoryMock_UpdateById_Call) RunAndReturn(run func(ctx context.Context, ID uuid.UUID, payload map[string]any, trx *gorm.DB) (order.OrderItem, error)) *OrderItemRepositoryMock_UpdateById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByIds provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) UpdateByIds(ctx context.Context, IDs []uuid.UUID, payload map[string]any, trx *gorm.DB) error {
	ret := _mock.Called(ctx, IDs, payload, trx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByIds")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, []uuid.UUID, map[string]any, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, IDs, payload, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// OrderItemRepositoryMock_UpdateByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByIds'
type OrderItemRepositoryMock_UpdateByIds_Call struct {
	*mock.Call
}

// UpdateByIds is a helper method to define mock.On call
//   - ctx context.Context
//   - IDs []uuid.UUID
//   - payload map[string]any
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) UpdateByIds(ctx interface{}, IDs interface{}, payload interface{}, trx interface{}) *OrderItemRepositoryMock_UpdateByIds_Call {
	return &OrderItemRepositoryMock_UpdateByIds_Call{Call: _e.mock.On("UpdateByIds", ctx, IDs, payload, trx)}
}

func (_c *OrderItemRepositoryMock_UpdateByIds_Call) Run(run func(ctx context.Context, IDs []uuid.UUID, payload map[string]any, trx *gorm.DB)) *OrderItemRepositoryMock_UpdateByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 []uuid.UUID
		if args[1] != nil {
			arg1 = args[1].([]uuid.UUID)
		}
		var arg2 map[string]any
		if args[2] != nil {
			arg2 = args[2].(map[string]any)
		}
		var arg3 *gorm.DB
		if args[3] != nil {
			arg3 = args[3].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_UpdateByIds_Call) Return(err error) *OrderItemRepositoryMock_UpdateByIds_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderItemRepositoryMock_UpdateByIds_Call) RunAndReturn(run func(ctx context.Context, IDs []uuid.UUID, payload map[string]any, trx *gorm.DB) error) *OrderItemRepositoryMock_UpdateByIds_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMany provides a mock function for the type OrderItemRepositoryMock
func (_mock *OrderItemRepositoryMock) UpdateMany(ctx context.Context, filter map[string]any, payload map[string]any, trx *gorm.DB) error {
	ret := _mock.Called(ctx, filter, payload, trx)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMany")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, map[string]any, map[string]any, *gorm.DB) error); ok {
		r0 = returnFunc(ctx, filter, payload, trx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// OrderItemRepositoryMock_UpdateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMany'
type OrderItemRepositoryMock_UpdateMany_Call struct {
	*mock.Call
}

// UpdateMany is a helper method to define mock.On call
//   - ctx context.Context
//   - filter map[string]any
//   - payload map[string]any
//   - trx *gorm.DB
func (_e *OrderItemRepositoryMock_Expecter) UpdateMany(ctx interface{}, filter interface{}, payload interface{}, trx interface{}) *OrderItemRepositoryMock_UpdateMany_Call {
	return &OrderItemRepositoryMock_UpdateMany_Call{Call: _e.mock.On("UpdateMany", ctx, filter, payload, trx)}
}

func (_c *OrderItemRepositoryMock_UpdateMany_Call) Run(run func(ctx context.Context, filter map[string]any, payload map[string]any, trx *gorm.DB)) *OrderItemRepositoryMock_UpdateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 map[string]any
		if args[1] != nil {
			arg1 = args[1].(map[string]any)
		}
		var arg2 map[string]any
		if args[2] != nil {
			arg2 = args[2].(map[string]any)
		}
		var arg3 *gorm.DB
		if args[3] != nil {
			arg3 = args[3].(*gorm.DB)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *OrderItemRepositoryMock_UpdateMany_Call) Return(err error) *OrderItemRepositoryMock_UpdateMany_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *OrderItemRepositoryMock_UpdateMany_Call) RunAndReturn(run func(ctx context.Context, filter map[string]any, payload map[string]any, trx *gorm.DB) error) *OrderItemRepositoryMock_UpdateMany_Call {
	_c.Call.Return(run)
	return _c
}
