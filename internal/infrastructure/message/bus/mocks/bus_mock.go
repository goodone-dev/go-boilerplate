// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package bus

import (
	"github.com/goodone-dev/go-boilerplate/internal/infrastructure/message/bus"
	mock "github.com/stretchr/testify/mock"
)

// NewBusMock creates a new instance of BusMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBusMock[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *BusMock[T] {
	mock := &BusMock[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// BusMock is an autogenerated mock type for the Bus type
type BusMock[T any] struct {
	mock.Mock
}

type BusMock_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *BusMock[T]) EXPECT() *BusMock_Expecter[T] {
	return &BusMock_Expecter[T]{mock: &_m.Mock}
}

// HasCallback provides a mock function for the type BusMock
func (_mock *BusMock[T]) HasCallback(topic string) bool {
	ret := _mock.Called(topic)

	if len(ret) == 0 {
		panic("no return value specified for HasCallback")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(topic)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// BusMock_HasCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasCallback'
type BusMock_HasCallback_Call[T any] struct {
	*mock.Call
}

// HasCallback is a helper method to define mock.On call
//   - topic string
func (_e *BusMock_Expecter[T]) HasCallback(topic interface{}) *BusMock_HasCallback_Call[T] {
	return &BusMock_HasCallback_Call[T]{Call: _e.mock.On("HasCallback", topic)}
}

func (_c *BusMock_HasCallback_Call[T]) Run(run func(topic string)) *BusMock_HasCallback_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *BusMock_HasCallback_Call[T]) Return(b bool) *BusMock_HasCallback_Call[T] {
	_c.Call.Return(b)
	return _c
}

func (_c *BusMock_HasCallback_Call[T]) RunAndReturn(run func(topic string) bool) *BusMock_HasCallback_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function for the type BusMock
func (_mock *BusMock[T]) Publish(topic string, arg T) {
	_mock.Called(topic, arg)
	return
}

// BusMock_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type BusMock_Publish_Call[T any] struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - topic string
//   - arg T
func (_e *BusMock_Expecter[T]) Publish(topic interface{}, arg interface{}) *BusMock_Publish_Call[T] {
	return &BusMock_Publish_Call[T]{Call: _e.mock.On("Publish", topic, arg)}
}

func (_c *BusMock_Publish_Call[T]) Run(run func(topic string, arg T)) *BusMock_Publish_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 T
		if args[1] != nil {
			arg1 = args[1].(T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BusMock_Publish_Call[T]) Return() *BusMock_Publish_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *BusMock_Publish_Call[T]) RunAndReturn(run func(topic string, arg T)) *BusMock_Publish_Call[T] {
	_c.Run(run)
	return _c
}

// Subscribe provides a mock function for the type BusMock
func (_mock *BusMock[T]) Subscribe(topic string, fn func(T)) bus.SubscriptionRef {
	ret := _mock.Called(topic, fn)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 bus.SubscriptionRef
	if returnFunc, ok := ret.Get(0).(func(string, func(T)) bus.SubscriptionRef); ok {
		r0 = returnFunc(topic, fn)
	} else {
		r0 = ret.Get(0).(bus.SubscriptionRef)
	}
	return r0
}

// BusMock_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type BusMock_Subscribe_Call[T any] struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - topic string
//   - fn func(T)
func (_e *BusMock_Expecter[T]) Subscribe(topic interface{}, fn interface{}) *BusMock_Subscribe_Call[T] {
	return &BusMock_Subscribe_Call[T]{Call: _e.mock.On("Subscribe", topic, fn)}
}

func (_c *BusMock_Subscribe_Call[T]) Run(run func(topic string, fn func(T))) *BusMock_Subscribe_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 func(T)
		if args[1] != nil {
			arg1 = args[1].(func(T))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BusMock_Subscribe_Call[T]) Return(subscriptionRef bus.SubscriptionRef) *BusMock_Subscribe_Call[T] {
	_c.Call.Return(subscriptionRef)
	return _c
}

func (_c *BusMock_Subscribe_Call[T]) RunAndReturn(run func(topic string, fn func(T)) bus.SubscriptionRef) *BusMock_Subscribe_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SubscribeAsync provides a mock function for the type BusMock
func (_mock *BusMock[T]) SubscribeAsync(topic string, fn func(T), transactional bool) bus.SubscriptionRef {
	ret := _mock.Called(topic, fn, transactional)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeAsync")
	}

	var r0 bus.SubscriptionRef
	if returnFunc, ok := ret.Get(0).(func(string, func(T), bool) bus.SubscriptionRef); ok {
		r0 = returnFunc(topic, fn, transactional)
	} else {
		r0 = ret.Get(0).(bus.SubscriptionRef)
	}
	return r0
}

// BusMock_SubscribeAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeAsync'
type BusMock_SubscribeAsync_Call[T any] struct {
	*mock.Call
}

// SubscribeAsync is a helper method to define mock.On call
//   - topic string
//   - fn func(T)
//   - transactional bool
func (_e *BusMock_Expecter[T]) SubscribeAsync(topic interface{}, fn interface{}, transactional interface{}) *BusMock_SubscribeAsync_Call[T] {
	return &BusMock_SubscribeAsync_Call[T]{Call: _e.mock.On("SubscribeAsync", topic, fn, transactional)}
}

func (_c *BusMock_SubscribeAsync_Call[T]) Run(run func(topic string, fn func(T), transactional bool)) *BusMock_SubscribeAsync_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 func(T)
		if args[1] != nil {
			arg1 = args[1].(func(T))
		}
		var arg2 bool
		if args[2] != nil {
			arg2 = args[2].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *BusMock_SubscribeAsync_Call[T]) Return(subscriptionRef bus.SubscriptionRef) *BusMock_SubscribeAsync_Call[T] {
	_c.Call.Return(subscriptionRef)
	return _c
}

func (_c *BusMock_SubscribeAsync_Call[T]) RunAndReturn(run func(topic string, fn func(T), transactional bool) bus.SubscriptionRef) *BusMock_SubscribeAsync_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SubscribeOnce provides a mock function for the type BusMock
func (_mock *BusMock[T]) SubscribeOnce(topic string, fn func(T)) bus.SubscriptionRef {
	ret := _mock.Called(topic, fn)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeOnce")
	}

	var r0 bus.SubscriptionRef
	if returnFunc, ok := ret.Get(0).(func(string, func(T)) bus.SubscriptionRef); ok {
		r0 = returnFunc(topic, fn)
	} else {
		r0 = ret.Get(0).(bus.SubscriptionRef)
	}
	return r0
}

// BusMock_SubscribeOnce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeOnce'
type BusMock_SubscribeOnce_Call[T any] struct {
	*mock.Call
}

// SubscribeOnce is a helper method to define mock.On call
//   - topic string
//   - fn func(T)
func (_e *BusMock_Expecter[T]) SubscribeOnce(topic interface{}, fn interface{}) *BusMock_SubscribeOnce_Call[T] {
	return &BusMock_SubscribeOnce_Call[T]{Call: _e.mock.On("SubscribeOnce", topic, fn)}
}

func (_c *BusMock_SubscribeOnce_Call[T]) Run(run func(topic string, fn func(T))) *BusMock_SubscribeOnce_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 func(T)
		if args[1] != nil {
			arg1 = args[1].(func(T))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BusMock_SubscribeOnce_Call[T]) Return(subscriptionRef bus.SubscriptionRef) *BusMock_SubscribeOnce_Call[T] {
	_c.Call.Return(subscriptionRef)
	return _c
}

func (_c *BusMock_SubscribeOnce_Call[T]) RunAndReturn(run func(topic string, fn func(T)) bus.SubscriptionRef) *BusMock_SubscribeOnce_Call[T] {
	_c.Call.Return(run)
	return _c
}

// SubscribeOnceAsync provides a mock function for the type BusMock
func (_mock *BusMock[T]) SubscribeOnceAsync(topic string, fn func(T)) bus.SubscriptionRef {
	ret := _mock.Called(topic, fn)

	if len(ret) == 0 {
		panic("no return value specified for SubscribeOnceAsync")
	}

	var r0 bus.SubscriptionRef
	if returnFunc, ok := ret.Get(0).(func(string, func(T)) bus.SubscriptionRef); ok {
		r0 = returnFunc(topic, fn)
	} else {
		r0 = ret.Get(0).(bus.SubscriptionRef)
	}
	return r0
}

// BusMock_SubscribeOnceAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeOnceAsync'
type BusMock_SubscribeOnceAsync_Call[T any] struct {
	*mock.Call
}

// SubscribeOnceAsync is a helper method to define mock.On call
//   - topic string
//   - fn func(T)
func (_e *BusMock_Expecter[T]) SubscribeOnceAsync(topic interface{}, fn interface{}) *BusMock_SubscribeOnceAsync_Call[T] {
	return &BusMock_SubscribeOnceAsync_Call[T]{Call: _e.mock.On("SubscribeOnceAsync", topic, fn)}
}

func (_c *BusMock_SubscribeOnceAsync_Call[T]) Run(run func(topic string, fn func(T))) *BusMock_SubscribeOnceAsync_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 func(T)
		if args[1] != nil {
			arg1 = args[1].(func(T))
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BusMock_SubscribeOnceAsync_Call[T]) Return(subscriptionRef bus.SubscriptionRef) *BusMock_SubscribeOnceAsync_Call[T] {
	_c.Call.Return(subscriptionRef)
	return _c
}

func (_c *BusMock_SubscribeOnceAsync_Call[T]) RunAndReturn(run func(topic string, fn func(T)) bus.SubscriptionRef) *BusMock_SubscribeOnceAsync_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type BusMock
func (_mock *BusMock[T]) Unsubscribe(topic string, ref bus.SubscriptionRef) {
	_mock.Called(topic, ref)
	return
}

// BusMock_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type BusMock_Unsubscribe_Call[T any] struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - topic string
//   - ref bus.SubscriptionRef
func (_e *BusMock_Expecter[T]) Unsubscribe(topic interface{}, ref interface{}) *BusMock_Unsubscribe_Call[T] {
	return &BusMock_Unsubscribe_Call[T]{Call: _e.mock.On("Unsubscribe", topic, ref)}
}

func (_c *BusMock_Unsubscribe_Call[T]) Run(run func(topic string, ref bus.SubscriptionRef)) *BusMock_Unsubscribe_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 bus.SubscriptionRef
		if args[1] != nil {
			arg1 = args[1].(bus.SubscriptionRef)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *BusMock_Unsubscribe_Call[T]) Return() *BusMock_Unsubscribe_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *BusMock_Unsubscribe_Call[T]) RunAndReturn(run func(topic string, ref bus.SubscriptionRef)) *BusMock_Unsubscribe_Call[T] {
	_c.Run(run)
	return _c
}

// WaitAsync provides a mock function for the type BusMock
func (_mock *BusMock[T]) WaitAsync() {
	_mock.Called()
	return
}

// BusMock_WaitAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitAsync'
type BusMock_WaitAsync_Call[T any] struct {
	*mock.Call
}

// WaitAsync is a helper method to define mock.On call
func (_e *BusMock_Expecter[T]) WaitAsync() *BusMock_WaitAsync_Call[T] {
	return &BusMock_WaitAsync_Call[T]{Call: _e.mock.On("WaitAsync")}
}

func (_c *BusMock_WaitAsync_Call[T]) Run(run func()) *BusMock_WaitAsync_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *BusMock_WaitAsync_Call[T]) Return() *BusMock_WaitAsync_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *BusMock_WaitAsync_Call[T]) RunAndReturn(run func()) *BusMock_WaitAsync_Call[T] {
	_c.Run(run)
	return _c
}
