name: Quality Gate

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24.9'

jobs:
  build_check:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: ./.github/actions/setup
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: Build
        run: go build -v ./...

  lint_check:
    name: Linter Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: ./.github/actions/setup
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          only-new-issues: true

  security_check:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: ./.github/actions/setup
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: Run gosec
        uses: securego/gosec@master
        with:
          args: '-exclude=G115 -r ./...'

  dependency_check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: ./.github/actions/setup
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: Dependency Vulnerability Scanning
        uses: golang/govulncheck-action@v1
        with:
          go-version-input: '${{ env.GO_VERSION }}'
          go-package: ./...

  test_check:
    name: Test & Coverage Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: ./.github/actions/setup
        with:
          go-version: '${{ env.GO_VERSION }}'

      - name: Run Tests with Coverage
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic -coverpkg=./... ./internal/application/...

      - name: Check Coverage Threshold
        uses: vladopajic/go-test-coverage@v2
        with:
          config: ./.testcoverage.yml

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
